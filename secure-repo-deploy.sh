#!/bin/bash
# Secure Repository Deployment with Secret Pruning
# Safely deploys Ultimate Toolkit updates to GitHub

set -e

echo "🔒 SECURE REPOSITORY DEPLOYMENT"
echo "==============================="

# Configuration
SPEC_KIT_REPO="https://github.com/M0nkeyFl0wer/spec-kit-assistant.git"
ULTIMATE_TOOLKIT_REPO="https://github.com/M0nkeyFl0wer/ultimate-toolkit.git"
WORK_DIR="/tmp/claude/repo-deploy"

# Secrets to exclude (CRITICAL SECURITY)
SECRETS_PATTERNS=(
    "*.key"
    "*.pem"
    "*.env"
    "*.env.*"
    "*secret*"
    "*password*"
    "*token*"
    "*api-key*"
    "ssh_config"
    ".ssh/*"
    "credentials.json"
    "auth.json"
    "*.p12"
    "*.pfx"
    "*private*"
    "config.json"
    ".claude.json"
    ".gitconfig"
    "*session*"
    "*cookie*"
)

# Safe files to include
SAFE_PATTERNS=(
    "*.js"
    "*.md"
    "*.json"
    "*.sh"
    "*.ts"
    "*.tsx"
    "*.jsx"
    "*.css"
    "*.html"
    "*.yml"
    "*.yaml"
    "package.json"
    "package-lock.json"
    "README.md"
    "*.spec.md"
    "*.test.js"
)

create_safe_deployment() {
    local repo_name="$1"
    local source_dir="$2"

    echo "🔧 Creating safe deployment for $repo_name..."

    # Create clean working directory
    rm -rf "$WORK_DIR/$repo_name"
    mkdir -p "$WORK_DIR/$repo_name"

    # Copy safe files only
    echo "📋 Copying safe files..."

    # Copy specific safe files
    find "$source_dir" -type f \( \
        -name "*.js" -o \
        -name "*.md" -o \
        -name "*.sh" -o \
        -name "*.ts" -o \
        -name "*.tsx" -o \
        -name "*.jsx" -o \
        -name "package.json" -o \
        -name "*.spec.md" \
    \) -not -path "*/node_modules/*" -not -path "*/.git/*" | while read file; do
        # Get relative path
        rel_path="${file#$source_dir/}"
        target_dir="$WORK_DIR/$repo_name/$(dirname "$rel_path")"

        # Create target directory
        mkdir -p "$target_dir"

        # Copy file
        cp "$file" "$target_dir/"
        echo "  ✅ $rel_path"
    done

    # Prune any secrets that might have slipped through
    echo "🔒 Pruning secrets..."
    prune_secrets "$WORK_DIR/$repo_name"

    # Create .gitignore for safety
    create_security_gitignore "$WORK_DIR/$repo_name"

    echo "✅ Safe deployment ready: $WORK_DIR/$repo_name"
}

prune_secrets() {
    local dir="$1"

    # Remove files matching secret patterns
    for pattern in "${SECRETS_PATTERNS[@]}"; do
        find "$dir" -name "$pattern" -type f -exec rm -f {} \; 2>/dev/null || true
    done

    # Scan file contents for potential secrets
    find "$dir" -type f \( -name "*.js" -o -name "*.md" -o -name "*.sh" \) | while read file; do
        # Remove lines containing potential secrets
        sed -i.bak '/API_KEY\|SECRET\|TOKEN\|PASSWORD\|PRIVATE_KEY/d' "$file" 2>/dev/null || true
        rm -f "$file.bak" 2>/dev/null || true
    done

    echo "🔒 Secret pruning complete"
}

create_security_gitignore() {
    local dir="$1"

    cat > "$dir/.gitignore" << 'EOF'
# Security - NEVER commit these
*.key
*.pem
*.env
*.env.*
*secret*
*password*
*token*
*api-key*
*private*
credentials.json
auth.json
config.json
.claude.json
.ssh/
ssh_config
*.p12
*.pfx
*session*
*cookie*

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Temporary files
tmp/
temp/
/tmp/
*.tmp
*.temp
EOF

    echo "🛡️ Security .gitignore created"
}

deploy_to_repo() {
    local repo_url="$1"
    local repo_name="$2"
    local deploy_dir="$WORK_DIR/$repo_name"

    echo "🚀 Deploying to $repo_name repository..."

    cd "$deploy_dir"

    # Initialize git if needed
    if [ ! -d ".git" ]; then
        git init
        git remote add origin "$repo_url"
    fi

    # Configure git safely (without personal info)
    git config user.name "Spec Kit Assistant"
    git config user.email "spec-kit@claude-code.ai"

    # Add all safe files
    git add .

    # Check if there are changes
    if git diff --staged --quiet; then
        echo "✅ No changes to deploy"
        return 0
    fi

    # Create commit
    local commit_msg="🤖 Spec Kit Assistant update: $(date '+%Y-%m-%d %H:%M:%S')

🔒 Security: All secrets pruned
🧹 Clean: Only safe files included
🌱 Generated by Ultimate Toolkit

Co-Authored-By: Spec <spec@claude-code.ai>"

    git commit -m "$commit_msg"

    echo "✅ Commit created successfully"
    echo "📋 Files in deployment:"
    git ls-files | head -20
    if [ $(git ls-files | wc -l) -gt 20 ]; then
        echo "... and $(($(git ls-files | wc -l) - 20)) more files"
    fi

    # Note: Actual push would require authentication
    echo "⚠️ Ready to push (authentication required)"
    echo "   git push origin main"
}

# Main execution
main() {
    echo "🐕 Spec's Secure Repository Deployment System"
    echo ""

    # Create safe deployment for Spec Kit Assistant
    if [ -d "~/spec-kit-assistant" ]; then
        create_safe_deployment "spec-kit-assistant" "$HOME/spec-kit-assistant"
        deploy_to_repo "$SPEC_KIT_REPO" "spec-kit-assistant"
    else
        echo "⚠️ Spec Kit Assistant directory not found"
    fi

    echo ""
    echo "🎉 Secure deployment process complete!"
    echo "📁 Deployment files available in: $WORK_DIR"
    echo "🔒 All secrets have been pruned"
    echo "✅ Ready for safe repository updates"
}

# Run main function
main "$@"